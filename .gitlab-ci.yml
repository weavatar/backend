image: golang:alpine

# 在每个任务执行前运行
before_script:
  - mkdir -p .go
  - go version
  - go env -w GO111MODULE=on
  - go env -w GOPROXY=https://goproxy.cn,direct

.go_cache:
  variables:
    GOPATH: $CI_PROJECT_DIR/.go
  cache:
    paths:
      - .go/pkg/mod/

# 全局变量
variables:
  OUTPUT_NAME: "framework"
  GO111MODULE: "on"
  GOPROXY: "https://goproxy.cn,direct"

stages:
  - prepare
  - build
  - deploy

golangci_lint:
  stage: prepare
  image: golangci/golangci-lint:latest-alpine
  extends: .go_cache
  allow_failure: true
  before_script:
    - sed -i 's/dl-cdn.alpinelinux.org/mirrors.tuna.tsinghua.edu.cn/g' /etc/apk/repositories
    - apk add --no-cache libwebp-dev
    - apk add --no-cache build-base
  script:
    - golangci-lint run --timeout 30m

unit_test:
  stage: prepare
  extends: .go_cache
  allow_failure: true
  before_script:
    - sed -i 's/dl-cdn.alpinelinux.org/mirrors.tuna.tsinghua.edu.cn/g' /etc/apk/repositories
    - apk add --no-cache libwebp-dev
    - apk add --no-cache build-base
  script:
    - go test -v -coverprofile=coverage.txt -covermode=atomic ./...

build:
  stage: build
  extends: .go_cache
  before_script:
    - sed -i 's/dl-cdn.alpinelinux.org/mirrors.tuna.tsinghua.edu.cn/g' /etc/apk/repositories
    - apk add --no-cache libwebp-dev
    - apk add --no-cache build-base
  script:
    - go mod download
    - CGO_ENABLED=1 go build -ldflags '-s -w --extldflags "-static -fpic"' -o $OUTPUT_NAME
  artifacts:
    name: "$OUTPUT_NAME"
    paths:
      - $OUTPUT_NAME
    expire_in: 1 week

deploy_development:
  stage: deploy
  image: alpine:latest
  extends: .go_cache
  dependencies:
    - build
  environment:
    name: development
    url: https://dev.weavatar.com
  before_script:
    - sed -i 's/dl-cdn.alpinelinux.org/mirrors.tuna.tsinghua.edu.cn/g' /etc/apk/repositories
    - apk add --no-cache openssh-client sshpass
  script:
    - sshpass -p $DEVELOPMENT_SERVER_PASSWORD ssh -o StrictHostKeyChecking=no -p $DEVELOPMENT_SERVER_PORT $DEVELOPMENT_SERVER_USER@$DEVELOPMENT_SERVER_IP "supervisorctl stop $OUTPUT_NAME" || true
    - sshpass -p $DEVELOPMENT_SERVER_PASSWORD scp -o StrictHostKeyChecking=no -P $DEVELOPMENT_SERVER_PORT -r $OUTPUT_NAME $DEVELOPMENT_SERVER_USER@$DEVELOPMENT_SERVER_IP:$DEVELOPMENT_SERVER_PATH
    - sshpass -p $DEVELOPMENT_SERVER_PASSWORD ssh -o StrictHostKeyChecking=no -p $DEVELOPMENT_SERVER_PORT $DEVELOPMENT_SERVER_USER@$DEVELOPMENT_SERVER_IP "cd $DEVELOPMENT_SERVER_PATH && chmod 755 $OUTPUT_NAME && chown www:www $OUTPUT_NAME && supervisorctl restart $OUTPUT_NAME"

deploy_production:
  stage: deploy
  image: alpine:latest
  extends: .go_cache
  dependencies:
    - build
  environment:
    name: production
    url: https://weavatar.com
  only:
    - main
  before_script:
    - sed -i 's/dl-cdn.alpinelinux.org/mirrors.tuna.tsinghua.edu.cn/g' /etc/apk/repositories
    - apk add --no-cache openssh-client sshpass
  script:
    - sshpass -p $PRODUCTION_SERVER_PASSWORD ssh -o StrictHostKeyChecking=no -p $PRODUCTION_SERVER_PORT $PRODUCTION_SERVER_USER@$PRODUCTION_SERVER_IP "supervisorctl stop $OUTPUT_NAME" || true
    - sshpass -p $PRODUCTION_SERVER_PASSWORD scp -o StrictHostKeyChecking=no -P $PRODUCTION_SERVER_PORT -r $OUTPUT_NAME $PRODUCTION_SERVER_USER@$PRODUCTION_SERVER_IP:$PRODUCTION_SERVER_PATH
    - sshpass -p $PRODUCTION_SERVER_PASSWORD ssh -o StrictHostKeyChecking=no -p $PRODUCTION_SERVER_PORT $PRODUCTION_SERVER_USER@$PRODUCTION_SERVER_IP "cd $PRODUCTION_SERVER_PATH && chmod 755 $OUTPUT_NAME && chown www:www $OUTPUT_NAME && supervisorctl restart $OUTPUT_NAME"
